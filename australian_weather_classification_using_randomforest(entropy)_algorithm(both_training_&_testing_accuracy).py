# -*- coding: utf-8 -*-
"""Australian_Weather_Classification_Using_RandomForest(Entropy)_Algorithm(Both_Training_&_Testing_Accuracy).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1llJEcW5nrV7NJv7CVCyg6k7Q3fc_eiM5
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/weatherAUS.csv')
df

#Exploratory_Data_Analysis
df.info()

df.head()

df.tail()

df.describe()

df.shape

df.isnull().sum()

a=df['Date']
b=df['Rainfall']

#lineplot
plt.plot(b)

#scatterplot
plt.scatter(a,b)

#barplot
plt.bar(b,height=20,width=15)

#histogram
plt.hist(b)

#pairplot
sns.pairplot(data=df,hue='RainTomorrow')

#counterplot
sns.countplot(x=a,data=df)

#boxplot_using_for_loop
plt.figure(figsize=(20,15))
plotnumber=1
for col in df.columns:
  if plotnumber<=24:
    plt.subplot(5,5,plotnumber)
    sns.boxplot(df[col])
    plt.xlabel(col,fontsize=15)
  plotnumber+=1
plt.tight_layout()
plt.show()

#Dropping_columns
df.drop(['Evaporation','Sunshine','Date'],axis=1)
df

#Label_Encoding
from sklearn.preprocessing import LabelEncoder
a=LabelEncoder()
columns=df.select_dtypes(include=['object']).columns
for col in columns:
  df[col]=a.fit_transform(df[col])

#filling_the_missing_values_using_impute
from sklearn.impute import SimpleImputer
impute=SimpleImputer()
df.iloc[:,:24]=impute.fit_transform(df.iloc[:,:24])

x=df.drop('RainTomorrow',axis=1)
y=df['RainTomorrow']

#training_and_testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=0)

#Random_Forest_algorithm
from sklearn.ensemble import RandomForestClassifier
clf=RandomForestClassifier(criterion='entropy',random_state=40,n_jobs=-1,max_depth=8,n_estimators=80,oob_score=True,max_features=10)

clf.fit(x_train,y_train)

y_pred=clf.predict(x_test)

from sklearn.metrics import accuracy_score,confusion_matrix
#accuracy_score
accuracy_score(y_pred,y_test)

#confusion_matrix
confusion_matrix(y_pred,y_test)

y_pred1=clf.predict(x_train)

#accuracy_score
accuracy_score(y_pred1,y_train)

#confusion_matrix
confusion_matrix(y_pred1,y_train)